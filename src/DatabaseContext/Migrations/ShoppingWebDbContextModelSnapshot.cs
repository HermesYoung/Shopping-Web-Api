// <auto-generated />
using System;
using DatabaseContext.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseContext.Migrations
{
    [DbContext(typeof(ShoppingWebDbContext))]
    partial class ShoppingWebDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseContext.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("category_pk");

                    b.HasIndex(new[] { "Name" }, "category_name_index");

                    b.ToTable("category", "shopping_web");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content_json");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("order_pk");

                    b.HasIndex(new[] { "CreateDate" }, "order_create_date_index");

                    b.HasIndex(new[] { "Name", "Email", "Phone" }, "order_name_email_phone_index");

                    b.HasIndex(new[] { "Status" }, "order_status_index");

                    b.ToTable("order", "shopping_web");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit")
                        .HasColumnName("is_sold_out");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("product_pk");

                    b.HasIndex(new[] { "IsDisabled" }, "product_is_disabled_index");

                    b.HasIndex(new[] { "IsSoldOut" }, "product_is_visible_index");

                    b.ToTable("product", "shopping_web");
                });

            modelBuilder.Entity("DatabaseContext.Entities.ProductSell", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("product_sell_pk");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Date" }, "product_sell_date_index");

                    b.ToTable("product_sell", "shopping_web");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content_json");

                    b.Property<string>("DisplayContent")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("display_content");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("promotion_pk");

                    b.HasIndex(new[] { "EndDate" }, "promotion_end_date_index");

                    b.HasIndex(new[] { "StartDate" }, "promotion_start_date_index");

                    b.ToTable("promotion", "shopping_web");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.HasKey("ProductId", "CategoryId")
                        .HasName("product_category_pk");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_category", "shopping_web");
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promotion_id");

                    b.HasKey("ProductId", "PromotionId")
                        .HasName("product_promotion_pk");

                    b.HasIndex("PromotionId");

                    b.ToTable("product_promotion", "shopping_web");
                });

            modelBuilder.Entity("DatabaseContext.Entities.ProductSell", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Order", "Order")
                        .WithMany("ProductSells")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("product_sell_order_id_fk");

                    b.HasOne("DatabaseContext.Entities.Product", "Product")
                        .WithMany("ProductSells")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_sell_product_id_fk");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("product_category_category_id_fk");

                    b.HasOne("DatabaseContext.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_category_product_id_fk");
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.HasOne("DatabaseContext.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("product_promotion_product_id_fk");

                    b.HasOne("DatabaseContext.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("product_promotion_promotion_id_fk");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Order", b =>
                {
                    b.Navigation("ProductSells");
                });

            modelBuilder.Entity("DatabaseContext.Entities.Product", b =>
                {
                    b.Navigation("ProductSells");
                });
#pragma warning restore 612, 618
        }
    }
}
